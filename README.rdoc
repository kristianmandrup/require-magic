= require-magic

Utility functions to facilitate importing (require) ruby files in complex Ruby project, such as gem with complex folder hierarchies. 
See unit tests in /test directory to see how to use the tools for the best effect.
Using this toolset should really simplify your require statements and make your application more flexible to change.

== USAGE  

require 'require_magic' # include both the old static require helpers and the DSL require language
require 'require_dsl'  # alternatively only include require_dsl (the DSL language)


# enter subfolder 'mira'

Folder.enter 'mira' do |folder|
  # from new location, enter a subdir
  folder.enter 'subdir' do |path|  # mira/subdir      
    folder.all('**/*.rb').except(/sound\/*.rb/).require  
  end

  # from new location, enter a subdir
  folder.enter 'another/subdir' do |path|           
    # use file blobs here
    folder.all('**/*.rb').require
  end

  # from new location, enter a subdir
  folder.enter 'a_subdir' do |path|         
    # matching and except are to be used as include and exclude filters
    # they each take a list containing regular expressions and strings
    # string arguments are postfixed with .rb internally if not present  
    folder.all('blip/**/*.rb').matching(/_mixin.rb/, /.*\/power/).except(/sound/, /disco/).require
    
    folder.enter 'sub_a' do |path|         
      folder.enter 'sub_b' do |path| # a_subdir/sub_a/sub_b         
        folder.all('grusch/**/*.rb').require
      end

    end
    folder.all.require    
  end
end


# use current path as folder

Folder.enter do |folder| 
  folder.all('**/*.rb').require
  folder.enter 'game' do |path|
    list = folder.all('**/*.rb')    
    # puts list.matching('sound', 'network').except(/sound/).show_require(:relative)
    list.matching('sound', 'network').except(/sound/).require
  end
end


== Static helpers
See unit tests for demonstrations of how to use it:

# Set basepath to use for require

required_files = Require.base_path = File.dirname(__FILE__)


To require all files within the top level folder 'data' (non-recursively)

required_files = Require.folders('data')


Override base_path

required_files = Require.folders('data', {:base_path => File.dirname(__FILE__) + '/../my/path})


The required_files returned is a list of the paths of the files that were required 

To require all files within the top level folder 'data' (non-recursively) and apply tracing to see output for the process of requiring the files

required_files = Require.folder 'data'
required_files = Require.folders 'data'


To require all files within the top level folder 'data' recursively 

required_files = Require.recursive('data')


To require all files within the top level folders 'data' and 'data2' (non-recursively) 

required_files = Require.recursive(['data', 'data2'])


To require all files within the top level folders 'data' and 'data2' recursively 

required_files = Require.recursive(['data', 'data2'])


To require files within the top level folders 'data' and 'data2' and also files within the subdirectory 'blip' if it exists 

required_files = Require.folders(['data', 'data2'], {:folders => ['blip]})


To require files within 'data/blip' and 'data2/blip' only, NOT including the root files

required_files = Require.folders(['data', 'data2'], {:folders => ['blip], :ignore_root_files => true})


To require files within 'data' and 'data2' first and then AFTER any files within the subdirectory 'blip' (default order)

required_files = Require.folders(['data', 'data2'], {:folders => ['blip], :root_files => :before})


To require files within 'data/blip' and 'data2/blip' first and then AFTER any files within 'data' and 'data2' folders (the root files)

required_files = Require.folders(['data', 'data2'], {:folders => ['blip], :root_files => :after})


To require files within 'data' and 'data2' (the root files) first (BEFORE) and then any files within the subdirectory 'blip'

required_files = Require.folders(['data', 'data2'], {:folders => ['blip], :root_files => :before})


== Copyright

Copyright (c) 2010 Kristian Mandrup. See LICENSE for details.
